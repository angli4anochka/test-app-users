import { useState, useEffect } from "react";
import { useNavigate, useSearchParams } from "react-router-dom";
import useUsersPage from "../hooks/useUsersPage";

import Button from "../components/Button/Button";
import EditUserModal from "../components/EditUserModal/EditUserModal";
import Pagination from "../components/Pagination/Pagination";
import UserTable from "../components/UserTable/UserTable";
import styles from "./MainPage.module.css";
import { User } from "../types";
import { deleteUser } from "../api/users";

export default function MainPage() {
    const navigate = useNavigate();
    const [searchParams, setSearchParams] = useSearchParams();
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–∑ URL –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º 1 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const pageFromUrl = parseInt(searchParams.get('page') || '1', 10);

    const {
        users, setUsers,
        page, setPage,
        isLoading, error,
        total, totalPages,
        limit, refetch,
    } = useUsersPage(pageFromUrl, 10);

    const [isEditing, setIsEditing] = useState<boolean>(false);
    const [selectedUser, setSelectedUser] = useState<User | null>(null);
    const [viewMode, setViewMode] = useState<'table' | 'cards'>('table');

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º URL —Å —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ
    useEffect(() => {
        if (page !== pageFromUrl && page > 0) {
            setSearchParams({ page: page.toString() }, { replace: true });
        }
    }, [page]); // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏

    const handleUserClick = (id: number) => {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ state –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        navigate(`/users/${id}`, { state: { fromPage: page } });
    };
    
    const openCreate = () => { 
        setSelectedUser(null); 
        setIsEditing(true); 
    };

    const handlePageChange = (next: number) => {
        if (next < 1) return;
        if (!total && next > page && users.length < limit) return;
        setPage(next);
        setSearchParams({ page: next.toString() });
    };

    const handleDelete = async (id: number) => {
        try {
            await deleteUser(id);
            await refetch(page);
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
            alert("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
        }
    };

    return (
        <div className={styles.container}>
            {error && <p className={styles.error}>{error}</p>}

            <div className={styles.headerWrapper}>
                <div className={styles.headerTop}>
                    <h2 className={styles.pageTitle}>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h2>
                    <div className={styles.headerActions}>
                        <div className={styles.viewToggle}>
                            <button
                                className={`${styles.viewButton} ${viewMode === 'table' ? styles.active : ''}`}
                                onClick={() => setViewMode('table')}
                                title="–¢–∞–±–ª–∏—á–Ω—ã–π –≤–∏–¥"
                            >
                                üìä
                            </button>
                            <button
                                className={`${styles.viewButton} ${viewMode === 'cards' ? styles.active : ''}`}
                                onClick={() => setViewMode('cards')}
                                title="–ö–∞—Ä—Ç–æ—á–∫–∏"
                            >
                                üóÇÔ∏è
                            </button>
                        </div>
                        <Button onClick={openCreate}>
                            <span style={{ fontSize: '16px' }}>+</span>
                            –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        </Button>
                    </div>
                </div>
            </div>

            <div style={{ opacity: isLoading ? 0.5 : 1, transition: 'opacity 0.2s' }}>
            {viewMode === 'table' ? (
                <UserTable
                    users={users}
                    onUserClick={handleUserClick}
                    onEdit={(u: User) => { 
                        setSelectedUser(u); 
                        setIsEditing(true); 
                    }}
                    onDelete={handleDelete}
                />
            ) : (
                <div className={styles.list}>
                    {users.map((user) => (
                        <div key={user.id} className={styles.card}>
                            <div className={styles.cardHeader}>
                                {user.avatar && (
                                    <img src={user.avatar} alt={user.name} className={styles.cardAvatar} />
                                )}
                                <div className={styles.cardInfo}>
                                    <h3 className={styles.cardName}>{user.name}</h3>
                                    <p className={styles.cardEmail}>{user.email}</p>
                                </div>
                            </div>
                            <div className={styles.cardDetails}>
                                {user.country && <p>üåç {user.country}</p>}
                                {user.city && <p>üèôÔ∏è {user.city}</p>}
                            </div>
                            <div className={styles.cardActions}>
                                <button
                                    className={styles.cardButton}
                                    onClick={() => handleUserClick(user.id)}
                                >
                                    –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                                </button>
                                <button
                                    className={styles.cardButton}
                                    onClick={() => {
                                        setSelectedUser(user);
                                        setIsEditing(true);
                                    }}
                                >
                                    –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                                </button>
                            </div>
                        </div>
                    ))}
                </div>
            )}
            </div>

            <Pagination
                page={page}
                totalPages={totalPages}
                onPageChange={handlePageChange}
            />

            <EditUserModal
                open={isEditing}
                user={selectedUser || undefined}
                mode={selectedUser ? "edit" : "create"}
                onCancel={() => setIsEditing(false)}
                onSave={async (saved: User) => {
                    if (selectedUser) {
                        // –ü—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ–∫—É—â–µ–º —Å–ø–∏—Å–∫–µ
                        setUsers(prev => prev.map(u => (u.id === saved.id ? saved : u)));
                    } else {
                        // –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                        await refetch(page);
                    }
                    setIsEditing(false);
                }}
            />
        </div>
    );
}